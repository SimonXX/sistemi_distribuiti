import { Injector, Directive, Input, ViewContainerRef, TemplateRef } from '@angular/core';
import { GUTTER_NUM_TOKEN } from './gutter-num-token';
import * as i0 from "@angular/core";
/**
 * This directive allows creating a dynamic injector inside ngFor
 * with dynamic gutter num and expose the injector for ngTemplateOutlet usage
 */
export class SplitGutterDynamicInjectorDirective {
    set gutterNum(value) {
        this.vcr.clear();
        const injector = Injector.create({
            providers: [
                {
                    provide: GUTTER_NUM_TOKEN,
                    useValue: value,
                },
            ],
            parent: this.vcr.injector,
        });
        this.vcr.createEmbeddedView(this.templateRef, { $implicit: injector });
    }
    constructor(vcr, templateRef) {
        this.vcr = vcr;
        this.templateRef = templateRef;
    }
    static ngTemplateContextGuard(dir, ctx) {
        return true;
    }
    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.1.0", ngImport: i0, type: SplitGutterDynamicInjectorDirective, deps: [{ token: i0.ViewContainerRef }, { token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    /** @nocollapse */ static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.1.0", type: SplitGutterDynamicInjectorDirective, selector: "[asSplitGutterDynamicInjector]", inputs: { gutterNum: ["asSplitGutterDynamicInjector", "gutterNum"] }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.1.0", ngImport: i0, type: SplitGutterDynamicInjectorDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[asSplitGutterDynamicInjector]',
                }]
        }], ctorParameters: () => [{ type: i0.ViewContainerRef }, { type: i0.TemplateRef }], propDecorators: { gutterNum: [{
                type: Input,
                args: ['asSplitGutterDynamicInjector']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BsaXQtZ3V0dGVyLWR5bmFtaWMtaW5qZWN0b3IuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYW5ndWxhci1zcGxpdC9zcmMvbGliL2d1dHRlci9zcGxpdC1ndXR0ZXItZHluYW1pYy1pbmplY3Rvci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLGdCQUFnQixFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQTtBQUN6RixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQTs7QUFNckQ7OztHQUdHO0FBSUgsTUFBTSxPQUFPLG1DQUFtQztJQUM5QyxJQUNJLFNBQVMsQ0FBQyxLQUFhO1FBQ3pCLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUE7UUFFaEIsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQztZQUMvQixTQUFTLEVBQUU7Z0JBQ1Q7b0JBQ0UsT0FBTyxFQUFFLGdCQUFnQjtvQkFDekIsUUFBUSxFQUFFLEtBQUs7aUJBQ2hCO2FBQ0Y7WUFDRCxNQUFNLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRO1NBQzFCLENBQUMsQ0FBQTtRQUVGLElBQUksQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFBO0lBQ3hFLENBQUM7SUFFRCxZQUNVLEdBQXFCLEVBQ3JCLFdBQW1FO1FBRG5FLFFBQUcsR0FBSCxHQUFHLENBQWtCO1FBQ3JCLGdCQUFXLEdBQVgsV0FBVyxDQUF3RDtJQUMxRSxDQUFDO0lBRUosTUFBTSxDQUFDLHNCQUFzQixDQUMzQixHQUF3QyxFQUN4QyxHQUFZO1FBRVosT0FBTyxJQUFJLENBQUE7SUFDYixDQUFDO2lJQTVCVSxtQ0FBbUM7cUhBQW5DLG1DQUFtQzs7MkZBQW5DLG1DQUFtQztrQkFIL0MsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsZ0NBQWdDO2lCQUMzQzsrR0FHSyxTQUFTO3NCQURaLEtBQUs7dUJBQUMsOEJBQThCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0b3IsIERpcmVjdGl2ZSwgSW5wdXQsIFZpZXdDb250YWluZXJSZWYsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSdcbmltcG9ydCB7IEdVVFRFUl9OVU1fVE9LRU4gfSBmcm9tICcuL2d1dHRlci1udW0tdG9rZW4nXG5cbmludGVyZmFjZSBTcGxpdEd1dHRlckR5bmFtaWNJbmplY3RvclRlbXBsYXRlQ29udGV4dCB7XG4gICRpbXBsaWNpdDogSW5qZWN0b3Jcbn1cblxuLyoqXG4gKiBUaGlzIGRpcmVjdGl2ZSBhbGxvd3MgY3JlYXRpbmcgYSBkeW5hbWljIGluamVjdG9yIGluc2lkZSBuZ0ZvclxuICogd2l0aCBkeW5hbWljIGd1dHRlciBudW0gYW5kIGV4cG9zZSB0aGUgaW5qZWN0b3IgZm9yIG5nVGVtcGxhdGVPdXRsZXQgdXNhZ2VcbiAqL1xuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2FzU3BsaXRHdXR0ZXJEeW5hbWljSW5qZWN0b3JdJyxcbn0pXG5leHBvcnQgY2xhc3MgU3BsaXRHdXR0ZXJEeW5hbWljSW5qZWN0b3JEaXJlY3RpdmUge1xuICBASW5wdXQoJ2FzU3BsaXRHdXR0ZXJEeW5hbWljSW5qZWN0b3InKVxuICBzZXQgZ3V0dGVyTnVtKHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLnZjci5jbGVhcigpXG5cbiAgICBjb25zdCBpbmplY3RvciA9IEluamVjdG9yLmNyZWF0ZSh7XG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IEdVVFRFUl9OVU1fVE9LRU4sXG4gICAgICAgICAgdXNlVmFsdWU6IHZhbHVlLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICAgIHBhcmVudDogdGhpcy52Y3IuaW5qZWN0b3IsXG4gICAgfSlcblxuICAgIHRoaXMudmNyLmNyZWF0ZUVtYmVkZGVkVmlldyh0aGlzLnRlbXBsYXRlUmVmLCB7ICRpbXBsaWNpdDogaW5qZWN0b3IgfSlcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgdmNyOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgIHByaXZhdGUgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPFNwbGl0R3V0dGVyRHluYW1pY0luamVjdG9yVGVtcGxhdGVDb250ZXh0PixcbiAgKSB7fVxuXG4gIHN0YXRpYyBuZ1RlbXBsYXRlQ29udGV4dEd1YXJkKFxuICAgIGRpcjogU3BsaXRHdXR0ZXJEeW5hbWljSW5qZWN0b3JEaXJlY3RpdmUsXG4gICAgY3R4OiB1bmtub3duLFxuICApOiBjdHggaXMgU3BsaXRHdXR0ZXJEeW5hbWljSW5qZWN0b3JUZW1wbGF0ZUNvbnRleHQge1xuICAgIHJldHVybiB0cnVlXG4gIH1cbn1cbiJdfQ==